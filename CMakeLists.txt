cmake_minimum_required(VERSION 3.0.2)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

include(CTest)
include(ParseAc)

project(Cbc VERSION 2.9.9 LANGUAGES CXX)

# ZLIB
find_package(ZLIB REQUIRED)
set(HAVE_ZLIB_H "1" CACHE INTERNAL "Use zlib")
set(COIN_HAS_ZLIB "1" CACHE INTERNAL "Use zlib")

# PTHREAD
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

# Flags
include (CheckIncludeFile)
include (CheckIncludeFileCXX)
check_include_file_cxx(cctype HAVE_CCTYPE)
check_include_file_cxx(cmath HAVE_CMATH)
check_include_file_cxx(cfloat HAVE_CFLOAT)
check_include_file_cxx(cinttypes HAVE_CINTTYPES)
check_include_file_cxx(cstdint HAVE_CSTDINT)
check_include_file_cxx(cassert HAVE_CASSERT)
check_include_file_cxx(cstdio HAVE_CSTDIO)
check_include_file_cxx(cstdlib HAVE_CSTDLIB)
check_include_file_cxx(cstdarg HAVE_CSTDARG)
check_include_file_cxx(cstddef HAVE_CSTDDEF)
check_include_file_cxx(cstring HAVE_CSTRING)
check_include_file_cxx(ctime HAVE_CTIME)
check_include_file_cxx(cieeefp HAVE_CIEEEFP)

check_include_file(dlfcn.h HAVE_DLFCN_H)
check_include_file(endian.h HAVE_ENDIAN_H)
check_include_file(math.h HAVE_MATH_H)
check_include_file(float.h HAVE_FLOAT_H)
check_include_file(ieeefp.h HAVE_IEEEFP_H)
check_include_file (inttypes.h HAVE_INTTYPES_H)
check_include_file (memory.h HAVE_MEMORY_H)
check_include_file (stdint.h HAVE_STDINT_H)
check_include_file (stdlib.h HAVE_STDLIB_H)
check_include_file (strings.h HAVE_STRINGS_H)
check_include_file (string.h HAVE_STRING_H)
check_include_file (sys/stat.h HAVE_SYS_STAT_H)
check_include_file (sys/types.h HAVE_SYS_TYPES_H)
check_include_file (unistd.h HAVE_UNISTD_H)

set(STDC_HEADERS 1 CACHE INTERNAL "System has ANSI C header files")

set(INCLUDES "")
if(HAVE_CMATH)
	list(APPEND INCLUDES "cmath")
endif()
if(HAVE_CFLOAT)
	list(APPEND INCLUDES "cfloat")
endif()
if(HAVE_CIEEEFP)
	list(APPEND INCLUDES "cieeefp")
endif()
if(HAVE_MATH_H)
	list(APPEND INCLUDES "math.h")
endif()
if(HAVE_FLOAT_H)
	list(APPEND INCLUDES "float.h")
endif()
if(HAVE_IEEEFP_H)
	list(APPEND INCLUDES "ieeefp.h")
endif()
message(STATUS "includes: ${INCLUDES}")

include(CheckSymbolExists)
#check_symbol_exists(std::min "cmath" IS_PLOP)
check_function_exists(std::min IS_PLOP)
if(IS_PLOP)
	message(STATUS "isplop found !")
endif()

# FINITE
include(CheckSymbolExists)
set(CMAKE_REQUIRED_LIBRARIES m)
check_symbol_exists(isfinite "${INCLUDES}" COIN_C_FINITE_R)
if(COIN_C_FINITE_R)
  set(COIN_C_FINITE isfinite)
endif()
if(NOT COIN_C_FINITE_R)
  check_symbol_exists(_finite "${INCLUDES}" COIN_C_FINITE_R)
  if(COIN_C_FINITE_R)
    set(COIN_C_FINITE _finite)
  endif()
endif()
if(NOT COIN_C_FINITE_R)
  check_symbol_exists(finite "${INCLUDES}" COIN_C_FINITE_R)
  if(COIN_C_FINITE_R)
    set(COIN_C_FINITE ifinite)
  endif()
endif()
message(STATUS "finite: ${COIN_C_FINITE}")

# ISNAN
include(CheckFunctionExists)
include(CheckSymbolExists)
set(CMAKE_REQUIRED_LIBRARIES m)
#check_symbol_exists(isnan ${INCLUDES} COIN_C_ISNAN_R)
check_function_exists(isnan COIN_C_ISNAN_R)
if(COIN_C_ISNAN_R)
	message(STATUS "plop")
	set(COIN_C_ISNAN isnan)
else()
	unset(COIN_C_ISNAN_R)
endif()
#check_symbol_exists(std::isnan ${INCLUDES} COIN_C_ISNAN_R)
check_function_exists(std::isnan COIN_C_ISNAN_R)
if(COIN_C_ISNAN_R)
	message(STATUS "plop")
	set(COIN_C_ISNAN std::isnan)
else()
	unset(COIN_C_ISNAN_R)
endif()
#check_symbol_exists(_isnan ${INCLUDES} COIN_C_ISNAN_R)
check_function_exists(_isnan COIN_C_ISNAN_R)
if(COIN_C_ISNAN_R)
	message(STATUS "plop")
	set(COIN_C_ISNAN _isnan)
else()
	unset(COIN_C_ISNAN_R)
endif()
#check_symbol_exists(isnand ${INCLUDES} COIN_C_ISNAN_R)
check_function_exists(isnand COIN_C_ISNAN_R)
if(COIN_C_ISNAN_R)
	message(STATUS "plop")
	set(COIN_C_ISNAN isnand)
else()
	unset(COIN_C_ISNAN_R)
endif()
message(STATUS "isnan: ${COIN_C_ISNAN}")

# Basic type
include(CheckTypeSize)
check_type_size("int" SIZEOF_INT)
check_type_size("long" SIZEOF_LONG)
check_type_size("long long" SIZEOF_LONG_LONG)
if(SIZEOF_LONG_LONG EQUAL "8")
  set(COIN_INT64_T  "long long")
  set(COIN_UINT64_T "unsigned long long")
  set(COIN_INTPTR_T "long long")
elseif(SIZEOF_LONG EQUAL "8")
  set(COIN_INT64_T  "long")
  set(COIN_UINT64_T "unsigned long")
  set(COIN_INTPTR_T "long")
else()
  set(COIN_INT64_T  "int")
  set(COIN_UINT64_T "unsigned int")
  set(COIN_INTPTR_T "int")
endif()

add_subdirectory(CoinUtils)
#add_subdirectory(Osi)
#add_subdirectory(Clp)
#add_subdirectory(Cgl)
#add_subdirectory(Cbc)
